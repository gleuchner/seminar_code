/*
 * This file was automatically generated by EvoSuite
 * Tue May 02 00:22:16 CEST 2017
 */

package seminar.quadrilateral;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import edu.princeton.cs.algs4.Point2D;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class QuadrilateralChecker_ESTest extends QuadrilateralChecker_ESTest_scaffolding {

  @Test
  public void test0()  throws Throwable  {
      QuadrilateralChecker quadrilateralChecker0 = new QuadrilateralChecker();
      Point2D[] point2DArray0 = new Point2D[0];
      String string0 = quadrilateralChecker0.getType(point2DArray0);
      assertEquals("NOT_A_QUADRILATERAL", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      QuadrilateralChecker quadrilateralChecker0 = new QuadrilateralChecker();
      // Undeclared exception!
      try { 
        quadrilateralChecker0.getType((Point2D[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("seminar.quadrilateral.QuadrilateralChecker", e);
      }
  }

  @Test
  public void test2()  throws Throwable  {
      QuadrilateralChecker quadrilateralChecker0 = new QuadrilateralChecker();
      Point2D point2D0 = new Point2D(0.0, 0.0);
      Point2D[] point2DArray0 = new Point2D[4];
      point2DArray0[0] = point2D0;
      Point2D point2D1 = new Point2D((-372.8484616), 0.0);
      point2DArray0[1] = point2D1;
      Point2D point2D2 = new Point2D(0.0, (-372.8484616));
      point2DArray0[2] = point2D2;
      Point2D point2D3 = new Point2D((-27.683928505559287), 1354.0);
      point2DArray0[3] = point2D3;
      String string0 = quadrilateralChecker0.getType(point2DArray0);
      assertEquals("CONVEX", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      QuadrilateralChecker quadrilateralChecker0 = new QuadrilateralChecker();
      Point2D[] point2DArray0 = new Point2D[4];
      Point2D point2D0 = new Point2D(2.0, 2.0);
      point2DArray0[0] = point2D0;
      point2DArray0[1] = point2D0;
      point2DArray0[2] = point2D0;
      point2DArray0[3] = point2D0;
      String string0 = quadrilateralChecker0.getType(point2DArray0);
      assertEquals("CONCAVE", string0);
  }

  @Test
  public void test4()  throws Throwable  {
      QuadrilateralChecker quadrilateralChecker0 = new QuadrilateralChecker();
      Point2D[] point2DArray0 = new Point2D[5];
      String string0 = quadrilateralChecker0.getType(point2DArray0);
      assertEquals("NOT_A_QUADRILATERAL", string0);
  }

  @Test
  public void test5()  throws Throwable  {
      QuadrilateralChecker quadrilateralChecker0 = new QuadrilateralChecker();
      Point2D[] point2DArray0 = new Point2D[4];
      Point2D point2D0 = new Point2D(372.2687464758082, (-2.6738644044554865));
      point2DArray0[0] = point2D0;
      Point2D point2D1 = new Point2D((-2.6738644044554865), 372.2687464758082);
      point2DArray0[1] = point2D1;
      Point2D point2D2 = new Point2D(372.2687464758082, 372.2687464758082);
      point2DArray0[2] = point2D2;
      Point2D point2D3 = new Point2D((-2.6738644044554865), (-2.6738644044554865));
      point2DArray0[3] = point2D3;
      String string0 = quadrilateralChecker0.getType(point2DArray0);
      assertEquals("TRAPEZOID", string0);
  }

  @Test
  public void test6()  throws Throwable  {
      QuadrilateralChecker quadrilateralChecker0 = new QuadrilateralChecker();
      Point2D[] point2DArray0 = new Point2D[4];
      // Undeclared exception!
      try { 
        quadrilateralChecker0.getType(point2DArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points[0] is null
         //
         assertThrownBy("edu.princeton.cs.algs4.GrahamScan", e);
      }
  }
}
